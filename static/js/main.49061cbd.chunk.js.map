{"version":3,"sources":["Block.js","Result.js","App.js","reportWebVitals.js","index.js"],"names":["Block","props","name","className","onClick","handler","data-event","input","Result","firstPlayerCount","secondPlayerCount","App","state","player","noOfPlayers","isGameOver","result","1","2","3","4","5","6","7","8","9","success","updateTheGame","bind","curState","this","random","winningBlock","newResult","count","compPatternIndex","findIndex","pattern","isFound","split","forEach","block","index","parseInt","compSuccess","splice","console","log","setState","calcA","Object","entries","filter","entry","length","Math","ceil","playerWhoWon","wonPattern","find","line","won","every","digit","element","document","querySelector","style","borderColor","borderWidth","setTimeout","event","preventDefault","eventType","currentTarget","getAttribute","number","lastUpdatedBlock","target","value","onChange","firstPlayerName","secondPlayerName","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.49061cbd.chunk.js","sourcesContent":["\nexport default function Block(props){\n    return (\n        <button\n            name={props.name}\n            className=\"blockContainer\"\n            onClick={props.handler}\n            data-event=\"play\"\n        >\n        {\n            !props.input ? null : (props.input === 1 ? \n            <div className=\"playerOneCoin\"></div> : \n            <div className=\"playerTwoCoin\"></div>)\n        }\n        </button>\n    )\n}","export default function Result(props) {\n    return (\n        <div className={`resultContainer ${props.className}`}>\n            <h3>{\"Number of Win's\"}</h3>\n            <div className=\"relative\">\n                <div className=\"playerOneCoinResult\">{props.firstPlayerCount || 0}</div>\n                <div className=\"playerTwoCoinResult\">{props.secondPlayerCount || 0}</div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './App.css';\nimport Block from './Block';\nimport Result from './Result';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      player: 1,\n      noOfPlayers: \"2\",\n      isGameOver: false,\n      firstPlayerCount: 0,\n      secondPlayerCount: 0,\n      result: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0 },\n      success: ['123', '456', '789', '147', '258', '369', '159', '357', '753', '951', '963', '852', '741', '987', '654', '321']\n    }\n    this.updateTheGame = this.updateTheGame.bind(this)\n  }\n\n  componentDidUpdate() {\n    let curState = this.state;\n    let success = ['123', '456', '789', '147', '258', '369', '159', '357']\n    if (!curState.isGameOver && curState.noOfPlayers === '1' && curState.player === 2) {\n      let player = this.state.player === 1 ? 2 : 1\n      let random;\n      let newResult = curState.result;\n      let winningBlock, count = 0;\n      let compPatternIndex = curState.success.findIndex((pattern) => {\n        let isFound = false;\n        count = 0;\n        pattern.split('').forEach((block, index) => {\n          if (count === 2 && curState.result[parseInt(block)] === 0) {\n            winningBlock = parseInt(block)\n            isFound = true;\n          } else if (curState.result[parseInt(block)] === 1) {\n            count++\n          }\n        })\n        return isFound;\n      })\n      if (winningBlock) {\n        let compSuccess = curState.success;\n        compSuccess.splice(compPatternIndex, 1)\n        console.log('winningBlock -', winningBlock)\n        newResult[winningBlock] = 2\n        this.setState({\n          result: newResult,\n          player,\n          success: compSuccess\n        })\n      } else {\n        let calcA = Object.entries(curState.result).filter((entry) => {\n          if (entry[1] === 0) {\n            return true;\n          }\n          return false\n        });\n        if (calcA.length > 0) {\n          random = Math.ceil(Math.random() * (calcA.length - 1)) || 0;\n          console.log('calcA - ', calcA, 'random - ', random)\n          random = calcA[random][0]\n          newResult[random] = 2\n          this.setState({\n            result: newResult,\n            player\n          })\n        }\n      }\n    }\n    // --------------------------------------------\n    let result = curState.result;\n    let playerWhoWon, wonPattern;\n    wonPattern = success.find((line) => {\n      let digits = line.split('')\n      let won = digits.every((digit) => {\n        if (result[digit] === 1) {\n          return true\n        }\n        return false\n      })\n      if (won) {\n        playerWhoWon = 'firstPlayerCount'\n      }\n      return won\n    })\n    if (!wonPattern) {\n      wonPattern = success.find((line) => {\n        let digits = line.split('')\n        let won = digits.every((digit) => {\n          if (result[digit] === 2) {\n            return true\n          }\n          return false\n        })\n        if (won) {\n          playerWhoWon = 'secondPlayerCount'\n        }\n        return won\n      })\n    }\n    if (!curState.isGameOver && !!playerWhoWon) {\n      wonPattern.split('').forEach((block) => {\n        const element = document.querySelector(`[name=\"${parseInt(block)}\"]`)\n        element.style.borderColor = 'greenyellow';\n        element.style.borderWidth = '6px'\n      })\n      this.setState({\n        isGameOver: true\n      })\n      setTimeout(() => {\n        this.setState((state) => {\n          return {\n            [playerWhoWon]: state[playerWhoWon] + 1,\n            result: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0 },\n            isGameOver: false,\n            player: 1,\n            success: ['123', '456', '789', '147', '258', '369', '159', '357', '753', '951', '963', '852', '741', '987', '654', '321']\n          }\n        })\n        wonPattern.split('').forEach((block) => {\n          const element = document.querySelector(`[name=\"${parseInt(block)}\"]`)\n          element.style.borderColor = 'black';\n          element.style.borderWidth = '3px'\n        })\n      }, 2000)\n    }\n  }\n\n  updateTheGame(event) {\n    event.preventDefault()\n    const eventType = event.currentTarget.getAttribute('data-event')\n    if (eventType === 'play') {\n      const name = event.currentTarget.name\n      let number = parseInt(name)\n      let player = this.state.player === 1 ? 2 : 1\n      if (!this.state.isGameOver && this.state.result[number] === 0) {\n        this.setState((state) => {\n          let newResult = state.result;\n          newResult[number] = state.player\n          return {\n            result: newResult,\n            lastUpdatedBlock: number,\n            player,\n          }\n        })\n      }\n    } else if (eventType === 'resetScores') {\n      this.setState({\n        firstPlayerCount: 0,\n        secondPlayerCount: 0\n      })\n    } else if (eventType === 'noOfPlayers') {\n      this.setState({\n        noOfPlayers: event.target.value\n      })\n    } else {\n      this.setState({\n        result: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0 },\n        player: 1\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"basic\">\n        <div className=\"gameContainer centerText\">\n          <h3>{\"Tic Tac Toe\"}</h3>\n          <table>\n            <tbody>\n              <tr>\n                <td><Block name=\"1\" input={this.state.result[\"1\"]} handler={this.updateTheGame} /></td>\n                <td><Block name=\"2\" input={this.state.result[\"2\"]} handler={this.updateTheGame} /></td>\n                <td><Block name=\"3\" input={this.state.result[\"3\"]} handler={this.updateTheGame} /></td>\n              </tr>\n              <tr>\n                <td><Block name=\"4\" input={this.state.result[\"4\"]} handler={this.updateTheGame} /></td>\n                <td><Block name=\"5\" input={this.state.result[\"5\"]} handler={this.updateTheGame} /></td>\n                <td><Block name=\"6\" input={this.state.result[\"6\"]} handler={this.updateTheGame} /></td>\n              </tr>\n              <tr>\n                <td><Block name=\"7\" input={this.state.result[\"7\"]} handler={this.updateTheGame} /></td>\n                <td><Block name=\"8\" input={this.state.result[\"8\"]} handler={this.updateTheGame} /></td>\n                <td><Block name=\"9\" input={this.state.result[\"9\"]} handler={this.updateTheGame} /></td>\n              </tr>\n            </tbody>\n          </table>\n          <div>\n            <button className=\"inline-block\" onClick={this.updateTheGame}>\n              <b>{\"New Game\"}</b>\n            </button>\n            <button className=\"inline-block\" data-event=\"resetScores\" onClick={this.updateTheGame}>\n              <b>{\"Reset the Scores\"}</b>\n            </button>\n            <select data-event=\"noOfPlayers\" value={this.state.noOfPlayers} className=\"inline-block\" onChange={this.updateTheGame}>\n              <option value=\"1\">{\"Single Player\"}</option>\n              <option value=\"2\">{\"Double Player\"}</option>\n            </select>\n          </div>\n          <Result\n            className=\"centerText\"\n            firstPlayerName=\"first\"\n            secondPlayerName=\"second\"\n            firstPlayerCount={this.state.firstPlayerCount}\n            secondPlayerCount={this.state.secondPlayerCount}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}