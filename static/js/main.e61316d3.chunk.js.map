{"version":3,"sources":["Block.js","Result.js","App.js","reportWebVitals.js","index.js"],"names":["Block","props","name","className","onClick","handler","data-event","input","Result","firstPlayerName","firstPlayerCount","secondPlayerName","secondPlayerCount","App","state","player","lastUpdatedBlock","noOfPlayers","isGameOver","result","1","2","3","4","5","6","7","8","9","updateTheGame","bind","curState","this","newResult","Object","entries","filter","entry","random","setState","playerWhoWon","wonPattern","success","find","line","won","split","every","digit","forEach","block","element","document","querySelector","parseInt","style","borderColor","borderWidth","setTimeout","event","preventDefault","eventType","currentTarget","getAttribute","number","target","value","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e61316d3.chunk.js","sourcesContent":["\nexport default function Block(props){\n    return (\n        <button\n            name={props.name}\n            className=\"blockContainer\"\n            onClick={props.handler}\n            data-event=\"play\"\n        >\n        {\n            !props.input ? null : (props.input === 1 ? \n            <div className=\"playerOneCoin\"></div> : \n            <div className=\"playerTwoCoin\"></div>)\n        }\n        </button>\n    )\n}","export default function Result(props){\n    return (\n        <div className={`resultContainer ${props.className}`}>\n            <h3>{\"Results Dashboard\"}</h3>\n            <div>\n                <table>\n                    <thead>\n                        <tr>\n                            <td className=\"tableHeading\">{\"Player\"}</td>\n                            <td></td>\n                            <td className=\"tableHeading\">{\"Number of Win's\"}</td>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>\n                                <b>{props.firstPlayerName}</b>\n                                <div className=\"playerOneCoin\"></div>\n                            </td>\n                            <td>{\"   \"}</td>\n                            <td>{props.firstPlayerCount || 0}</td>\n                        </tr>\n                        <tr>\n                            <td>\n                                <b>{props.secondPlayerName}</b>\n                                <div className=\"playerTwoCoin\"></div>\n                            </td>\n                            <td>{\"   \"}</td>\n                            <td>{props.secondPlayerCount || 0}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './App.css';\nimport Block from './Block';\nimport Result from './Result';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      player: 1,\n      lastUpdatedBlock: 0,\n      noOfPlayers: \"2\",\n      isGameOver: false,\n      firstPlayerCount: 0,\n      secondPlayerCount: 0,\n      result: {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}\n    }\n    this.updateTheGame = this.updateTheGame.bind(this)\n  }\n\n  componentDidUpdate() {\n    let curState = this.state;\n    if(curState.noOfPlayers === '1' && curState.player === 2){\n      let player = this.state.player === 1 ? 2 : 1\n      let random;\n      let newResult = curState.result;\n      let calcA = Object.entries(curState.result).filter((entry) => {\n        if(entry[1] === 0){\n          return true;\n        }\n        return false\n      })\n      newResult[random] = 2\n      this.setState({\n        result: newResult,\n        player\n      })\n    }\n    // --------------------------------------------\n    let result = curState.result;\n    let playerWhoWon, wonPattern;\n    let success = ['123', '456', '789', '147', '258', '369', '159', '357'];\n    wonPattern = success.find((line) => {\n      let digits = line.split('')\n      let won = digits.every((digit) => {\n        if(result[digit] === 1){\n          return true\n        }\n        return false\n      })\n      if(won){\n        playerWhoWon = 'firstPlayerCount'\n      }\n      return won\n    })\n    if(!wonPattern){\n      wonPattern = success.find((line) => {\n        let digits = line.split('')\n        let won = digits.every((digit) => {\n          if(result[digit] === 2){\n            return true\n          }\n          return false\n        })\n        if(won){\n          playerWhoWon = 'secondPlayerCount'\n        }\n        return won\n      })\n    }\n    if(!curState.isGameOver && !!playerWhoWon){\n      wonPattern.split('').forEach((block) => {\n        const element = document.querySelector(`[name=\"${parseInt(block)}\"]`)\n        element.style.borderColor = 'greenyellow';\n        element.style.borderWidth = '6px'\n      })\n      this.setState({\n        isGameOver: true\n      })\n      setTimeout(() => {\n        this.setState((state) => {\n          return {\n            [playerWhoWon]: state[playerWhoWon] + 1,\n            result: {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0},\n            isGameOver: false,\n            player: 1\n          }\n        })\n        wonPattern.split('').forEach((block) => {\n          const element = document.querySelector(`[name=\"${parseInt(block)}\"]`)\n          element.style.borderColor = 'black';\n          element.style.borderWidth = '3px'\n        })\n      }, 2000)\n    }\n  }\n\n  updateTheGame(event) {\n    event.preventDefault()\n    const eventType = event.currentTarget.getAttribute('data-event')\n    if (eventType === 'play') {\n      const name = event.currentTarget.name\n      let number = parseInt(name)\n      let player = this.state.player === 1 ? 2 : 1\n      if(!this.state.isGameOver && this.state.result[number] === 0){\n        this.setState((state) => {\n          let newResult = state.result;\n          newResult[number] = state.player\n          return {\n            result: newResult,\n            lastUpdatedBlock: number,\n            player,\n          }\n        })\n      }\n    } else if(eventType === 'resetScores'){\n      this.setState({\n        firstPlayerCount: 0,\n        secondPlayerCount: 0\n      })\n    } else if(eventType === 'noOfPlayers'){\n      this.setState({\n        noOfPlayers: event.target.value\n      })\n    } else {\n      this.setState({\n        result: {1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0}\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"basic\">\n        <div className=\"gameContainer centerText\">\n          <h3>{\"Tic Tac Toe\"}</h3>\n          <table>\n            <tbody>\n              <tr>\n                  <td><Block name=\"1\" input={this.state.result[\"1\"]} handler={this.updateTheGame} /></td>\n                  <td><Block name=\"2\" input={this.state.result[\"2\"]} handler={this.updateTheGame} /></td>\n                  <td><Block name=\"3\" input={this.state.result[\"3\"]} handler={this.updateTheGame} /></td>\n              </tr>\n              <tr>\n                  <td><Block name=\"4\" input={this.state.result[\"4\"]} handler={this.updateTheGame} /></td>\n                  <td><Block name=\"5\" input={this.state.result[\"5\"]} handler={this.updateTheGame} /></td>\n                  <td><Block name=\"6\" input={this.state.result[\"6\"]} handler={this.updateTheGame} /></td>\n              </tr>\n              <tr>\n                  <td><Block name=\"7\" input={this.state.result[\"7\"]} handler={this.updateTheGame} /></td>\n                  <td><Block name=\"8\" input={this.state.result[\"8\"]} handler={this.updateTheGame} /></td>\n                  <td><Block name=\"9\" input={this.state.result[\"9\"]} handler={this.updateTheGame} /></td>\n              </tr>\n            </tbody>\n          </table>\n          <div>\n          <button className=\"inline-block\" onClick={this.updateTheGame}>\n            <b>{\"New Game\"}</b>\n          </button>\n          <button className=\"inline-block\" data-event=\"resetScores\" onClick={this.updateTheGame}>\n            <b>{\"Reset the Scores\"}</b>\n          </button>\n          <select data-event=\"noOfPlayers\" value={this.state.noOfPlayers} className=\"inline-block\" onChange={this.updateTheGame}>\n            <option value=\"1\">{\"Single Player\"}</option>\n            <option value=\"2\">{\"Double Player\"}</option>\n          </select>\n          </div>\n          <Result\n          className=\"centerText\"\n          firstPlayerName=\"first\"\n          secondPlayerName=\"second\"\n          firstPlayerCount={this.state.firstPlayerCount}\n          secondPlayerCount={this.state.secondPlayerCount}\n        />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}